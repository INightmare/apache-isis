#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}  Licensed to the Apache Software Foundation (ASF) under one
${symbol_pound}  or more contributor license agreements.  See the NOTICE file
${symbol_pound}  distributed with this work for additional information
${symbol_pound}  regarding copyright ownership.  The ASF licenses this file
${symbol_pound}  to you under the Apache License, Version 2.0 (the
${symbol_pound}  "License"); you may not use this file except in compliance
${symbol_pound}  with the License.  You may obtain a copy of the License at
${symbol_pound}  
${symbol_pound}         http://www.apache.org/licenses/LICENSE-2.0
${symbol_pound}         
${symbol_pound}  Unless required by applicable law or agreed to in writing,
${symbol_pound}  software distributed under the License is distributed on an
${symbol_pound}  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
${symbol_pound}  KIND, either express or implied.  See the License for the
${symbol_pound}  specific language governing permissions and limitations
${symbol_pound}  under the License.


${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}
${symbol_pound} Services and fixtures
${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound}
${symbol_pound} Specify the domain services.
${symbol_pound} 
${symbol_pound} These are the most important configuration properties in the system, as they define
${symbol_pound} the set of the classes for Isis to instantiate as domain service singletons.
${symbol_pound} From these domain service instances the rest of the metamodel is discovered, while the 
${symbol_pound} end-user gains access to other domain objects by invoking the actions of the domain services.
${symbol_pound}
${symbol_pound} The implementations depend on the configured objectstore. 
${symbol_pound}


${symbol_pound} if using the in-memory object store:
${symbol_pound} (also edit isis.persistor below, and edit pom.xml)
isis.services.prefix = objstore.dflt
isis.services = todo.ToDoItemsDefault


${symbol_pound} if using the SQL object store:
${symbol_pound} (also edit isis.persistor below, and edit pom.xml)
${symbol_pound}isis.services.prefix = objstore.sql
${symbol_pound}isis.services = todo.ToDoItemsSql


${symbol_pound} if using the mongodb object store:
${symbol_pound} (also edit isis.persistor below, and edit pom.xml)
${symbol_pound}isis.services.prefix = objstore.mongodb
${symbol_pound}isis.services = todo.ToDoItemsMongo




${symbol_pound}
${symbol_pound} Specify the (optional) test fixtures
${symbol_pound}
${symbol_pound} Fixtures are used to seed the object store with an initial set of data.  For the 
${symbol_pound} in-memory object store, the fixtures are installed on every run.  For other
${symbol_pound} object stores, they are used only when the object store is first initialized.
${symbol_pound}
isis.fixtures.prefix= fixture
isis.fixtures= todo.ToDoItemsFixture


${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}
${symbol_pound} specify system components.
${symbol_pound}
${symbol_pound} The values correspond to the named components in the installer-registry.properties file
${symbol_pound} in the org.apache.isis.runtimes.dflt:runtime JAR (in the org.apache.isis.runtimes.dflt.runtime package)
${symbol_pound}
${symbol_pound} Although all configuration could reside in isis.properties, the recommendation is
${symbol_pound} to split out into component specific files:
${symbol_pound} 
${symbol_pound}    xxx_yyy.properties files
${symbol_pound}
${symbol_pound} where
${symbol_pound}    * xxx is the component type, and
${symbol_pound}    * yyy is the component name.
${symbol_pound}
${symbol_pound} For example, persistor_sql.properties holds configuration information specific to the
${symbol_pound}
${symbol_pound}
${symbol_pound} If the components are changed, also remember to edit pom.xml (further comments can be 
${symbol_pound} found in the persistor_xxx.properties files)
${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}


${symbol_pound}
${symbol_pound} configure authentication mechanis to use (to logon to the system)
${symbol_pound} note that the Scimpi view allows access to anonymous users
${symbol_pound} 
isis.authentication=file


${symbol_pound}
${symbol_pound} configure authorization mechanism to use

${symbol_pound} The authorization mechanism define each users' permissions to view/edit object properties 
${symbol_pound} or collections, and to view/invoke object actions
${symbol_pound}
${symbol_pound} >>>
${symbol_pound} >>> NB: authorization also requires a "facet decorator" to be installed, 
${symbol_pound} >>> see 'miscellaneous' settings below.
${symbol_pound} >>> 
${symbol_pound} 
isis.authorization=file



${symbol_pound}
${symbol_pound} configure the persistor (object store) to use
${symbol_pound}
${symbol_pound} * in-memory   requires no additional configuration, but stores object in-memory 
${symbol_pound}               and so is only suitable for prototyping
${symbol_pound} * mongodb     uses MongDB to be persist objects as JSON documents.  It requires MongoDB
${symbol_pound}               to be installed first (see persistor_mongodb.properties) 
${symbol_pound} * sql         uses an RDBMS to persist objects as table rows.  It requires a suitable RDBMS
${symbol_pound}               supporting JDBC to be installed (see persistor_sql.properties)
${symbol_pound}
${symbol_pound} also edit isis.services (above) and pom.xml
${symbol_pound} 

isis.persistor=in-memory
${symbol_pound}isis.persistor=mongodb
${symbol_pound}isis.persistor=sql



${symbol_pound}
${symbol_pound} configure the user profile store to use.
${symbol_pound} 
${symbol_pound} the user profile store is supported by some viewers as a way to store 
${symbol_pound} user-specific settings (eg colours, themes etc)
${symbol_pound} 
isis.user-profile-store=in-memory



${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}
${symbol_pound} Miscellaneous
${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound}
${symbol_pound} enable authorization
${symbol_pound}
${symbol_pound} authorization requires that a "facet decorator" be installed; this intercepts every
${symbol_pound} request and delegates to the configured authorization mechanism.  
${symbol_pound}

${symbol_pound}isis.reflector.facets.include=org.apache.isis.runtimes.dflt.runtime.authorization.standard.AuthorizationFacetFactoryImpl


${symbol_pound}
${symbol_pound} enable Isis' built-in support for lazy loading/object dirtying.
${symbol_pound}
${symbol_pound} This configuration causes every domain entity to be "enhanced" so that objects graphs
${symbol_pound} can be traversed transparent, and modified objects are automatically saved back to the
${symbol_pound} object store.
${symbol_pound}
${symbol_pound} Note that this setting isn't required by some persistors (though it is required for the 
${symbol_pound} in-memory, mongodb and sql persistors listed above)
${symbol_pound}
isis.persistor.object-factory=org.apache.isis.runtimes.dflt.bytecode.dflt.objectfactory.CglibObjectFactory


${symbol_pound}
${symbol_pound} enable class substitution in the meta model
${symbol_pound}
${symbol_pound} The reflector (Isis metamodel) must be instructed to ignore the side-effects of enabling lazy-loading;
${symbol_pound} specifically it ignores any cglib-generated subclasses. 
${symbol_pound}
isis.reflector.class-substitutor=org.apache.isis.runtimes.dflt.bytecode.dflt.classsubstitutor.CglibClassSubstitutor
