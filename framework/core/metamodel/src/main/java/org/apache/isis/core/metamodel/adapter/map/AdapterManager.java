/**
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.apache.isis.core.metamodel.adapter.map;

import org.apache.isis.core.commons.components.Injectable;
import org.apache.isis.core.metamodel.adapter.ObjectAdapter;
import org.apache.isis.core.metamodel.adapter.ObjectAdapterLookup;
import org.apache.isis.core.metamodel.adapter.ResolveState;
import org.apache.isis.core.metamodel.adapter.oid.AggregatedOid;
import org.apache.isis.core.metamodel.adapter.oid.CollectionOid;
import org.apache.isis.core.metamodel.adapter.oid.Oid;
import org.apache.isis.core.metamodel.adapter.oid.RootOid;
import org.apache.isis.core.metamodel.spec.ObjectSpecification;
import org.apache.isis.core.metamodel.spec.feature.OneToManyAssociation;

public interface AdapterManager extends Injectable, ObjectAdapterLookup {


    /**
     * Looks up or creates a standalone (value) or root adapter.
     * 
     * <p>
     * Implementation should simply delegate to {@link #adapterFor(Object, ObjectAdapter, OneToManyAssociation)}, 
     * with <tt>parentAdapter</tt> and <tt>association</tt> both null.
     * 
     * @see #adapterFor(Object, ObjectAdapter)
     * @see #adapterFor(Object, ObjectAdapter, OneToManyAssociation)
     */
    ObjectAdapter adapterFor(Object domainObject);

    /**
     * Looks up or creates a standalone (value), aggregated or root adapter.
     * 
     * <p>
     * Implementation should simply delegate to {@link #adapterFor(Object, ObjectAdapter, OneToManyAssociation)}, 
     * with <tt>parentAdapter</tt> set but <tt>association</tt> both null.
     * 
     * <p>
     * @see #adapterFor(Object)
     * @see #adapterFor(Object, ObjectAdapter, OneToManyAssociation)
     */
    ObjectAdapter adapterFor(Object domainObject, ObjectAdapter parentAdapter);

    /**
     * Looks up or creates either a standalone, root, aggregated or collection adapter.
     * If a newly created root adapter is returned, it will be transient.
     * In all cases the {@link ResolveState} is in the appropriate state.
     * 
     * <p>
     * If no adapter is found for the provided pojo, then the rules for creating
     * the {@link ObjectAdapter adapter} are as follows:
     * <ul>
     * 
     * <li>if the pojo's {@link ObjectSpecification specification} indicates
     * that this is an immutable value, then a {@link ResolveState#VALUE}
     * {@link ObjectAdapter adapter} is created.  Such an adapter has a null {@link Oid}
     * and is never mapped.
     * 
     * <li>if context <tt>parentAdapter</tt> has been provided but no <tt>association</tt>
     * has been provided, then the pojo's {@link ObjectSpecification} is checked to determine
     * if the type is intrinsically aggregated.  If so then an aggregated adapter (one 
     * with an {@link AggregatedOid}) is created, and is parented.  
     * The {@link AggregatedOid#getLocalId() localId} of this adapter's {@link AggregatedOid}
     * will be as generated by <tt>OidGenerator</tt>.  Its {@link ResolveState} will 
     * be inferred from its parent adapter.
     * 
     * <li>if context <tt>parentAdapter</tt> has been provided but no <tt>association</tt>,
     * and the pojo's {@link ObjectSpecification} is <i>not</i> intrinsically aggregated, then a
     * root adapter (with a {@link RootOid}) will be created.  The state of this adapter is transient.
     * 
     * <li>if context <tt>parentAdapter</tt> has been provided and the <tt>association</tt>
     * is a one-to-one association (property), then a root adapter will be created.
     * The state of this adapter is transient.
     *
     * <li>if context <tt>parentAdapter</tt> has been provided and the <tt>association</tt>
     * is a one-to-many association (collection), then a collection adapter will be created, 
     * representing the collection instance (List, Set etc).  This collection adapter
     * is parented by the <tt>parentAdapter</tt>, and its Oid will be of type {@link CollectionOid}.
     * 
     * </ul>
     * 
     * <p>
     * Provided by the <tt>AdapterManager</tt> when used by framework.
     * 
     * @param pojo
     *            - pojo to adapt
     * @param parentAdapter
     *            - optional; used if adapter is parented (either based on its spec, or because an association which indicates/requires it to be so).
     * @param collection
     *            - optional; if present then used to return a collection adapter.
     *            
     * @see #adapterFor(Object)
     * @see #adapterFor(Object, ObjectAdapter)            
     */
    public ObjectAdapter adapterFor(final Object pojo, final ObjectAdapter parentAdapter, OneToManyAssociation collection);

}
